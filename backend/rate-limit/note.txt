=====connect db====

-------------------CODE THAM KHAO REDIS

const Redis = require("ioredis");
const redis = new Redis();

// Hàm kiểm tra số lượt truy cập
async function checkRateLimit(ip, limit, duration) {
  const key = `rate_limit:${ip}`;
  const now = Date.now();

  // Lấy thông tin về số lượt truy cập và thời gian truy cập gần nhất
  const data = await redis.hgetall(key);

  // Nếu không có thông tin truy cập gần đây
  if (!data || !data.count) {
    await redis.hmset(key, "count", 1, "time", now);
    await redis.expire(key, duration);
    return true;
  }

  // Tính toán số lượt truy cập còn lại và thời gian reset
  const count = parseInt(data.count);
  const time = parseInt(data.time);
  const diff = now - time;
  const remaining = limit - count;
  const reset = duration - Math.floor(diff / 1000);

  // Nếu số lượt truy cập còn lại là 0
  if (remaining <= 0) {
    throw new Error(`Quá giới hạn số lượt truy cập, vui lòng thử lại sau ${reset} giây.`);
  }

  // Cập nhật thông tin truy cập
  await redis.hmset(key, "count", count + 1, "time", now);

  return true;
}

// Middleware ratelimit
function ratelimit(limit, duration) {
  return async (req, res, next) => {
    try {
      const ip = req.headers["x-forwarded-for"] || req.socket.remoteAddress;
      await checkRateLimit(ip, limit, duration);
      next();
    } catch (err) {
      res.status(429).send({ error: err.message });
    }
  };
}

// Sử dụng middleware ratelimit
app.use(ratelimit(10, 60)); // Giới hạn 10 lượt truy cập trong 60 giây

-------------------CODE THAM KHAO REDIS





-------------------------CODE MONGO

export let db: any;
// connectToDb((error: string) => {
//   if (!error) {
//     db = getDb();
//   }
// });


app.get("/books", (req: Request, res: Response) => {
    const page = req.query.p || 0;
    const showLimitBooks: number = 3;
    let books: any[] = [];
    //db.collection('books').find() <=> db.books.find()
    db.collection("books")
      .find()
      .sort({ author: 1 })
      .skip(Number(page) * showLimitBooks)
      .limit(showLimitBooks)
      .forEach((book: Object) => books.push(book))
      .then(() => {
        res.status(200).json(books);
      })
      .catch(() => {
        res.status(500).json({ error: "Could not fetch the documents" });
      });
  });
  // get one item in collection mongodb
  app.get("/books/:id", (req: Request, res: Response) => {
    // get param :id = req.params.id
    if (ObjectId.isValid(req.params.id)) {
      db.collection("books")
        .findOne({ _id: new ObjectId(req.params.id) })
        .then((item: Object) => {
          res.status(200).json(item);
        })
        .catch(() => {
          res.status(500).json({ error: "Could not fetch the documents" });
        });
    } else {
      res.json("Not a valid ID");
    }
  });
  // add one item
  app.post("/books", (req: Request, res: Response) => {
    //  get information body : req.body
    const book = req.body;
    db.collection("books")
      .insertOne(book)
      .then((result: Object) => {
        res.status(201).json(result);
      })
      .catch(() => {
        res.status(500).json({ error: "Could not post the documents" });
      });
  });
  // add more than item
  app.post("/books/addMany", (req: Request, res: Response) => {
    //  get information body : req.body
    const book = req.body;
    db.collection("books")
      .insertMany(book)
      .then((result: []) => {
        res.status(201).json(result);
      })
      .catch(() => {
        res.status(500).json({ error: "Could not post the documents" });
      });
  });
  // update one item
  app.patch("/books/:id", (req: Request, res: Response) => {
    const reqId = req.params.id;
    const updateBody = req.body;
    if (ObjectId.isValid(req.params.id)) {
      db.collection("books")
        .updateOne({ _id: new ObjectId(reqId) }, { $set: updateBody })
        .then((updated: Object) => {
          res.status(200).json(updated);
        })
        .catch(() => {
          res.status(500).json({ error: "Could not fetch the documents" });
        });
    } else {
      res.json("Not a valid ID");
    }
  });
  //  delete item
  app.delete("/books/:id", (req: Request, res: Response) => {
    const reqId = req.params.id;
    if (ObjectId.isValid(req.params.id)) {
      db.collection("books")
        .deleteOne({ _id: new ObjectId(reqId) })
        .then((deleted: string) => {
          res.status(200).json(deleted);
        })
        .catch(() => {
          res.status(500).json({ error: "Could not fetch the documents" });
        });
    } else {
      res.json("Not a valid ID");
    }
  });